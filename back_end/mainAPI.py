from fastapi import Depends, FastAPI, responses
import usersAPI
import matchesAPI
import requested_matchesAPI
import competitionsAPI
import teamsAPI
import playersAPI
import managersAPI
import data.mongo_setup as mongo_setup
from data.rules import n
from services.user_service import verify_role
import pickle

app = FastAPI()
app.include_router(usersAPI.router)
app.include_router(matchesAPI.router)
app.include_router(requested_matchesAPI.router)
app.include_router(competitionsAPI.router)
app.include_router(teamsAPI.router)
app.include_router(playersAPI.router)
app.include_router(managersAPI.router)
#ROBOMONGO sostituto di mongoDBcompass

#cd '.\Progetto wikiFootballData\back_end\API'
#uvicorn mainAPI:app --reload
try:
    in_file=open('config.dat','rb')
    n=pickle.load(in_file)
    in_file.close()
except FileNotFoundError:
    #print("Config file not created yet!")
    pass

mongo_setup.global_init()

@app.get("/")
async def root():
    body=(
        "<html>"
        "<body style='padding: 10px;'>"
        "<h1>Wiki Football Data API</h1>"
        "Welcome to Wiki Football Data, the open database for sharing Football Analytics."
        "Go to \help to see how this Database works"
        "</body>"
        "</html>"
    )
    return responses.HTMLResponse(content=body)

@app.get("/help")
async def get_help():
    """
    Print helpful information
    """
    body=(
        "<html>"
        "<body style='padding: 10px;'>"
        "<h1>Tutorial and Guidelines</h1>"
        """
        In this Database we collect a lot of football info: Competitions; Teams; Players; Managers; Matches; Analysis of the Matches.\n
        Here are some rules you should know:
        <ol>
            <li>To have complete access to the Database you should sign up wich is free!</li>
            <li>Users are divided into simple User and Editor. Help to increase the Database and you'll become Editor.
            Once an Editor you'll be able to promote other users to the role of Editor.</li>
            <li>All data in this Database are posted/generated by users, Editor have the possibility to evaluate them.\n
            The only exceptions are the Analysis of the matches wich are evaluated by all Users. If an Analysis reaches N \"endorsements\"
            then it will become \"confirmed\", on the contrary if it reaches N \"dislikes\" then it will be overwritable.</li>
            <li>The Competitions are divided into \"National leagues\" (Premier League, Serie A, LaLiga, Bundesliga, ...) and \"Tournaments\" (FIFA World Cups, Champions Leagues, Europa Leagues, ...),
            this is due to the fact that the Teams belongs to the \"National leagues\" not to the \"Tournaments\", as possibly the Matches. Since there is no \"National league\" for the National Teams
            there is the fictitious Competition \"National teams\" wich is the one that include all National Teams.</li>
            <li>Matches are divided into time slot to ease the Analysis of the match.\n
            Analysis are generated through the <a href="https://github.com/playerank/soccerLogger">soccerLogger App</a>.</li>
        </ol>
        To add the Match that you want to analyze, if these informations aren't in the Database, you need to add: The competition of the match; The leagues of the teams; The teams;
        the national teams of the players in the match formations; the managers.\n
        Help us create the first open Database for football fans generated by football fans.
        """
        "</body>"
        "</html>"
    )
    return responses.HTMLResponse(content=body)

@app.get("/rules")
async def get_N(username: str, token: str=Depends(usersAPI.oauth2_scheme)):
    """
    Return the value of N
    Only administrators can call this funcion
    """
    if verify_role(username)!="A":
        return responses.JSONResponse(content={"message":"Forbidden Operation"},status_code=403)
    global n
    return n

@app.post("/change-N")
async def change_N(username: str, new_value: int, token: str=Depends(usersAPI.oauth2_scheme)):
    """
    Change the value of N (it's not retroactive), if new_value is incorrect return error
    Only administrators can call this function
    """
    if verify_role(username)!="A":
        return responses.JSONResponse(content={"message":"Forbidden Operation"},status_code=403)
    if new_value>usersAPI.get_user_n():
        return responses.JSONResponse(content={"message":"value is incorrect"},status_code=400)
    global n
    n=abs(new_value)
    out_file=open('config.dat','wb')
    pickle.dump(n, out_file)
    out_file.close()
    return {"message":"N updated successfully!"}